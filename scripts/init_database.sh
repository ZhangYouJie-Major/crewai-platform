#!/bin/bash

# =============================================================================
# CrewAI Platform - 数据库完整初始化脚本
# 
# 功能：
# 1. 创建数据库结构（所有表、索引、约束）
# 2. 初始化基础数据（用户、角色、权限、LLM模型、MCP工具等）
# 3. 支持本地和云端数据库
# 
# 使用方法：
# ./init_database.sh [local|remote]
# 
# 默认为本地数据库，使用 remote 参数连接云端数据库
# =============================================================================

set -e  # 遇到错误立即退出
set -u  # 使用未定义变量时报错

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 数据库配置
DB_TYPE="${1:-local}"

if [ "$DB_TYPE" = "remote" ]; then
    # 云端数据库配置
    DB_HOST="110.40.167.8"
    DB_PORT="5432"
    DB_NAME="crewai_db"
    DB_USER="crewai"
    DB_PASSWORD="123456"
    log_info "使用云端数据库: ${DB_HOST}:${DB_PORT}"
else
    # 本地数据库配置
    DB_HOST="localhost"
    DB_PORT="5432"
    DB_NAME="crewai_db"
    DB_USER="crewai"
    DB_PASSWORD="${DB_PASSWORD:-your_secure_password}"
    log_info "使用本地数据库: ${DB_HOST}:${DB_PORT}"
fi

# PostgreSQL 客户端路径
PSQL_CMD="/opt/homebrew/Cellar/postgresql@17/17.5/bin/psql"
PG_DUMP_CMD="/opt/homebrew/Cellar/postgresql@17/17.5/bin/pg_dump"

# 检查 PostgreSQL 客户端
if [ ! -f "$PSQL_CMD" ]; then
    PSQL_CMD="psql"
    PG_DUMP_CMD="pg_dump"
    log_warning "使用系统默认的 PostgreSQL 客户端"
fi

# 连接字符串
export PGPASSWORD="$DB_PASSWORD"
PSQL_CONN="$PSQL_CMD -h $DB_HOST -p $DB_PORT -U $DB_USER"

# 检查数据库连接
check_connection() {
    log_info "检查数据库连接..."
    if $PSQL_CONN -d postgres -c "SELECT version();" >/dev/null 2>&1; then
        log_success "数据库连接正常"
    else
        log_error "无法连接到数据库，请检查连接配置"
        exit 1
    fi
}

# 创建数据库（如果不存在）
create_database() {
    log_info "检查并创建数据库 $DB_NAME..."
    
    # 检查数据库是否存在
    DB_EXISTS=$($PSQL_CONN -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" 2>/dev/null || echo "")
    
    if [ -z "$DB_EXISTS" ]; then
        log_info "创建数据库 $DB_NAME..."
        $PSQL_CONN -d postgres -c "CREATE DATABASE $DB_NAME;" || {
            log_error "创建数据库失败"
            exit 1
        }
        log_success "数据库 $DB_NAME 创建成功"
    else
        log_info "数据库 $DB_NAME 已存在"
    fi
}

# 创建数据库结构
create_schema() {
    log_info "创建数据库表结构..."
    
    $PSQL_CONN -d $DB_NAME << 'EOF'
-- 设置数据库参数
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET default_tablespace = '';
SET default_table_access_method = heap;

-- =============================================
-- 1. 用户认证相关表 (Django 内置)
-- =============================================

-- Django 内容类型表
CREATE TABLE IF NOT EXISTS public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Django 权限表
CREATE TABLE IF NOT EXISTS public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Django 用户组表
CREATE TABLE IF NOT EXISTS public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Django 用户组权限关联表
CREATE TABLE IF NOT EXISTS public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 用户表 (扩展 Django User)
CREATE TABLE IF NOT EXISTS public.auth_user (
    id bigint NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    phone character varying(11) NOT NULL DEFAULT '',
    avatar character varying(100) NOT NULL DEFAULT '',
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW()
);

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 用户组关联表
CREATE TABLE IF NOT EXISTS public.auth_user_groups (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    group_id integer NOT NULL
);

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 用户权限关联表
CREATE TABLE IF NOT EXISTS public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id bigint NOT NULL,
    permission_id integer NOT NULL
);

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 2. RBAC 权限管理表
-- =============================================

-- 系统角色表
CREATE TABLE IF NOT EXISTS public.sys_role (
    id bigint NOT NULL,
    name character varying(64) NOT NULL,
    description character varying(255) NOT NULL DEFAULT '',
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW()
);

ALTER TABLE public.sys_role ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sys_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 系统权限表
CREATE TABLE IF NOT EXISTS public.sys_permission (
    id bigint NOT NULL,
    name character varying(64) NOT NULL,
    codename character varying(100) NOT NULL,
    description character varying(255) NOT NULL DEFAULT '',
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW()
);

ALTER TABLE public.sys_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sys_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 用户角色关联表
CREATE TABLE IF NOT EXISTS public.sys_user_role (
    id bigint NOT NULL,
    assigned_at timestamp with time zone NOT NULL DEFAULT NOW(),
    role_id bigint NOT NULL,
    user_id bigint NOT NULL
);

ALTER TABLE public.sys_user_role ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sys_user_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- 角色权限关联表
CREATE TABLE IF NOT EXISTS public.sys_role_permission (
    id bigint NOT NULL,
    assigned_at timestamp with time zone NOT NULL DEFAULT NOW(),
    permission_id bigint NOT NULL,
    role_id bigint NOT NULL
);

ALTER TABLE public.sys_role_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sys_role_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 3. LLM 模型管理表
-- =============================================

-- LLM 模型表
CREATE TABLE IF NOT EXISTS public.llm_model (
    id bigint NOT NULL,
    name character varying(64) NOT NULL,
    provider character varying(32) NOT NULL,
    model_name character varying(128) NOT NULL,
    description text NOT NULL DEFAULT '',
    langchain_class character varying(128) NOT NULL DEFAULT 'ChatOpenAI',
    api_base_url character varying(200) NOT NULL DEFAULT '',
    api_key text NOT NULL DEFAULT '',
    api_version character varying(16) NOT NULL DEFAULT '',
    temperature double precision NOT NULL DEFAULT 0.7,
    max_tokens integer,
    timeout integer NOT NULL DEFAULT 30,
    max_retries integer NOT NULL DEFAULT 2,
    extra_kwargs jsonb NOT NULL DEFAULT '{}',
    model_kwargs jsonb NOT NULL DEFAULT '{}',
    model_info jsonb NOT NULL DEFAULT '{}',
    last_validated timestamp with time zone,
    is_available boolean NOT NULL DEFAULT false,
    validation_error text NOT NULL DEFAULT '',
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW()
);

ALTER TABLE public.llm_model ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.llm_model_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 4. MCP 工具管理表
-- =============================================

-- MCP 工具表
CREATE TABLE IF NOT EXISTS public.mcp_tool (
    id bigint NOT NULL,
    name character varying(64) NOT NULL,
    display_name character varying(128) NOT NULL,
    description text NOT NULL DEFAULT '',
    version character varying(32) NOT NULL DEFAULT '1.0.0',
    server_type character varying(32) NOT NULL,
    connection_config jsonb NOT NULL DEFAULT '{}',
    tool_schema jsonb NOT NULL DEFAULT '{}',
    connection_timeout integer NOT NULL DEFAULT 30,
    request_timeout integer NOT NULL DEFAULT 60,
    max_retries integer NOT NULL DEFAULT 3,
    retry_delay double precision NOT NULL DEFAULT 1.0,
    health_check_enabled boolean NOT NULL DEFAULT true,
    health_check_interval integer NOT NULL DEFAULT 300,
    health_check_method character varying(64) NOT NULL DEFAULT 'ping',
    status character varying(32) NOT NULL DEFAULT 'unknown',
    last_health_check timestamp with time zone,
    last_error text NOT NULL DEFAULT '',
    response_time_ms integer,
    total_calls integer NOT NULL DEFAULT 0,
    success_calls integer NOT NULL DEFAULT 0,
    is_active boolean NOT NULL DEFAULT false,
    is_public boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW()
);

ALTER TABLE public.mcp_tool ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.mcp_tool_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- MCP 工具用户权限表
CREATE TABLE IF NOT EXISTS public.mcp_tool_allowed_users (
    id bigint NOT NULL,
    mcptool_id bigint NOT NULL,
    user_id bigint NOT NULL
);

ALTER TABLE public.mcp_tool_allowed_users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.mcp_tool_allowed_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 5. CrewAI Agent 管理表
-- =============================================

-- CrewAI Agent 表
CREATE TABLE IF NOT EXISTS public.crewai_agent (
    id bigint NOT NULL,
    name character varying(64) NOT NULL,
    display_name character varying(128) NOT NULL,
    description text NOT NULL DEFAULT '',
    role character varying(128) NOT NULL,
    goal text NOT NULL DEFAULT '',
    backstory text NOT NULL DEFAULT '',
    "verbose" boolean NOT NULL DEFAULT false,
    memory boolean NOT NULL DEFAULT false,
    max_iter integer NOT NULL DEFAULT 20,
    max_rpm integer,
    max_execution_time integer,
    max_retry_limit integer NOT NULL DEFAULT 2,
    allow_delegation boolean NOT NULL DEFAULT false,
    respect_context_window boolean NOT NULL DEFAULT true,
    use_system_prompt boolean NOT NULL DEFAULT true,
    multimodal boolean NOT NULL DEFAULT false,
    inject_date boolean NOT NULL DEFAULT false,
    date_format character varying(32) NOT NULL DEFAULT '%Y-%m-%d %H:%M:%S',
    reasoning boolean NOT NULL DEFAULT false,
    max_reasoning_attempts integer NOT NULL DEFAULT 3,
    step_callback character varying(255) NOT NULL DEFAULT '',
    enable_monitoring boolean NOT NULL DEFAULT true,
    custom_instructions text NOT NULL DEFAULT '',
    agent_kwargs jsonb NOT NULL DEFAULT '{}',
    status character varying(32) NOT NULL DEFAULT 'inactive',
    total_tasks integer NOT NULL DEFAULT 0,
    completed_tasks integer NOT NULL DEFAULT 0,
    total_execution_time integer NOT NULL DEFAULT 0,
    last_execution timestamp with time zone,
    last_error text NOT NULL DEFAULT '',
    is_active boolean NOT NULL DEFAULT true,
    is_public boolean NOT NULL DEFAULT true,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    function_calling_llm_id bigint,
    llm_model_id bigint NOT NULL,
    owner_id bigint NOT NULL
);

ALTER TABLE public.crewai_agent ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.crewai_agent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Agent 用户权限表
CREATE TABLE IF NOT EXISTS public.crewai_agent_allowed_users (
    id bigint NOT NULL,
    crewaiagent_id bigint NOT NULL,
    user_id bigint NOT NULL
);

ALTER TABLE public.crewai_agent_allowed_users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.crewai_agent_allowed_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 6. Agent 工具关联表
-- =============================================

-- Agent 工具关联表
CREATE TABLE IF NOT EXISTS public.agent_tool_relation (
    id bigint NOT NULL,
    "order" integer NOT NULL,
    is_required boolean NOT NULL DEFAULT false,
    is_fallback boolean NOT NULL DEFAULT false,
    max_calls_per_task integer,
    config_override jsonb NOT NULL DEFAULT '{}',
    prompt_template text NOT NULL DEFAULT '',
    permission_level character varying(32) NOT NULL DEFAULT 'read',
    allowed_operations jsonb NOT NULL DEFAULT '[]',
    restricted_paths jsonb NOT NULL DEFAULT '[]',
    status character varying(32) NOT NULL DEFAULT 'active',
    total_calls integer NOT NULL DEFAULT 0,
    successful_calls integer NOT NULL DEFAULT 0,
    total_execution_time integer NOT NULL DEFAULT 0,
    last_used timestamp with time zone,
    last_error text NOT NULL DEFAULT '',
    config_version character varying(32) NOT NULL DEFAULT '1.0',
    assigned_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    agent_id bigint NOT NULL,
    tool_id bigint NOT NULL
);

ALTER TABLE public.agent_tool_relation ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.agent_tool_relation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 7. Chat 相关表
-- =============================================

-- Chat Crew 表
CREATE TABLE IF NOT EXISTS public.chat_crew (
    id bigint NOT NULL,
    name character varying(128) NOT NULL,
    display_name character varying(255) NOT NULL,
    description text NOT NULL DEFAULT '',
    workflow_type character varying(32) NOT NULL DEFAULT 'sequential',
    aggregation_strategy character varying(32) NOT NULL DEFAULT 'simple',
    max_execution_time integer,
    max_retry_limit integer NOT NULL DEFAULT 2,
    enable_monitoring boolean NOT NULL DEFAULT true,
    custom_instructions text NOT NULL DEFAULT '',
    crew_config jsonb NOT NULL DEFAULT '{}',
    is_active boolean NOT NULL DEFAULT true,
    total_executions integer NOT NULL DEFAULT 0,
    successful_executions integer NOT NULL DEFAULT 0,
    total_execution_time integer NOT NULL DEFAULT 0,
    last_execution timestamp with time zone,
    last_error text NOT NULL DEFAULT '',
    is_public boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    owner_id bigint NOT NULL
);

ALTER TABLE public.chat_crew ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.chat_crew_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Chat Crew 用户权限表
CREATE TABLE IF NOT EXISTS public.chat_crew_allowed_users (
    id bigint NOT NULL,
    chatcrew_id bigint NOT NULL,
    user_id bigint NOT NULL
);

ALTER TABLE public.chat_crew_allowed_users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.chat_crew_allowed_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Chat Session 表
CREATE TABLE IF NOT EXISTS public.chat_session (
    id bigint NOT NULL,
    title character varying(255) NOT NULL,
    session_type character varying(32) NOT NULL DEFAULT 'chat',
    status character varying(32) NOT NULL DEFAULT 'active',
    context jsonb NOT NULL DEFAULT '{}',
    max_messages integer NOT NULL DEFAULT 100,
    auto_summary boolean NOT NULL DEFAULT false,
    total_messages integer NOT NULL DEFAULT 0,
    total_tokens integer NOT NULL DEFAULT 0,
    total_execution_time integer NOT NULL DEFAULT 0,
    last_message_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    crew_id bigint,
    user_id bigint NOT NULL
);

ALTER TABLE public.chat_session ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.chat_session_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Chat Message 表
CREATE TABLE IF NOT EXISTS public.chat_message (
    id bigint NOT NULL,
    message_type character varying(32) NOT NULL DEFAULT 'user',
    sender_type character varying(32) NOT NULL DEFAULT 'user',
    sender_id bigint NOT NULL,
    sender_name character varying(255) NOT NULL,
    content text NOT NULL,
    crew_execution_id character varying(64) NOT NULL DEFAULT '',
    agent_calls jsonb NOT NULL DEFAULT '{}',
    metadata jsonb NOT NULL DEFAULT '{}',
    is_processed boolean NOT NULL DEFAULT false,
    processing_time integer,
    error_message text NOT NULL DEFAULT '',
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    session_id bigint NOT NULL
);

ALTER TABLE public.chat_message ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.chat_message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 8. Crew Agent 分配表
-- =============================================

-- Crew Agent 分配表
CREATE TABLE IF NOT EXISTS public.crew_agent_assignment (
    id bigint NOT NULL,
    role_in_crew character varying(64) NOT NULL,
    custom_role_name character varying(128) NOT NULL DEFAULT '',
    role_description text NOT NULL DEFAULT '',
    priority integer NOT NULL DEFAULT 1,
    is_required boolean NOT NULL DEFAULT true,
    max_execution_time integer,
    execution_conditions jsonb NOT NULL DEFAULT '{}',
    input_template text NOT NULL DEFAULT '',
    output_format character varying(64) NOT NULL DEFAULT 'text',
    context_keys jsonb NOT NULL DEFAULT '[]',
    output_keys jsonb NOT NULL DEFAULT '[]',
    is_active boolean NOT NULL DEFAULT true,
    total_calls integer NOT NULL DEFAULT 0,
    successful_calls integer NOT NULL DEFAULT 0,
    total_execution_time integer NOT NULL DEFAULT 0,
    last_called timestamp with time zone,
    last_error text NOT NULL DEFAULT '',
    "order" integer NOT NULL DEFAULT 1,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    agent_id bigint NOT NULL,
    crew_id bigint NOT NULL
);

ALTER TABLE public.crew_agent_assignment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.crew_agent_assignment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 9. 数据字典表
-- =============================================

-- 系统数据字典表
CREATE TABLE IF NOT EXISTS public.sys_dictionary (
    id bigint NOT NULL,
    code character varying(100) NOT NULL,
    name character varying(100) NOT NULL,
    value text,
    description text,
    is_active boolean NOT NULL DEFAULT true,
    sort_order integer NOT NULL DEFAULT 0,
    created_at timestamp with time zone NOT NULL DEFAULT NOW(),
    updated_at timestamp with time zone NOT NULL DEFAULT NOW(),
    parent_id bigint,
    dict_type character varying(50) NOT NULL,
    CONSTRAINT sys_dictionary_item_sort_order_check CHECK ((sort_order >= 0))
);

ALTER TABLE public.sys_dictionary ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sys_dictionary_item_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- =============================================
-- 10. Django 系统表
-- =============================================

-- Django 管理日志表
CREATE TABLE IF NOT EXISTS public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id bigint NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Django 迁移记录表
CREATE TABLE IF NOT EXISTS public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Django 会话表
CREATE TABLE IF NOT EXISTS public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);

EOF

    if [ $? -eq 0 ]; then
        log_success "数据库表结构创建成功"
    else
        log_error "数据库表结构创建失败"
        exit 1
    fi
}

# 创建约束和索引
create_constraints_and_indexes() {
    log_info "创建主键约束和索引..."
    
    $PSQL_CONN -d $DB_NAME << 'EOF'

-- =============================================
-- 主键约束
-- =============================================

-- 检查并添加主键约束的函数
DO $$ 
BEGIN
    -- django_content_type
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'django_content_type_pkey') THEN
        ALTER TABLE ONLY public.django_content_type ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);
    END IF;
    
    -- auth_permission
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_permission_pkey') THEN
        ALTER TABLE ONLY public.auth_permission ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);
    END IF;
    
    -- auth_group
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_group_pkey') THEN
        ALTER TABLE ONLY public.auth_group ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);
    END IF;
    
    -- auth_group_permissions
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_group_permissions_pkey') THEN
        ALTER TABLE ONLY public.auth_group_permissions ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);
    END IF;
    
    -- auth_user
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_user_pkey') THEN
        ALTER TABLE ONLY public.auth_user ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);
    END IF;
    
    -- auth_user_groups
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_user_groups_pkey') THEN
        ALTER TABLE ONLY public.auth_user_groups ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);
    END IF;
    
    -- auth_user_user_permissions
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_user_user_permissions_pkey') THEN
        ALTER TABLE ONLY public.auth_user_user_permissions ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);
    END IF;
    
    -- sys_role
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_role_pkey') THEN
        ALTER TABLE ONLY public.sys_role ADD CONSTRAINT sys_role_pkey PRIMARY KEY (id);
    END IF;
    
    -- sys_permission
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_permission_pkey') THEN
        ALTER TABLE ONLY public.sys_permission ADD CONSTRAINT sys_permission_pkey PRIMARY KEY (id);
    END IF;
    
    -- sys_user_role
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_user_role_pkey') THEN
        ALTER TABLE ONLY public.sys_user_role ADD CONSTRAINT sys_user_role_pkey PRIMARY KEY (id);
    END IF;
    
    -- sys_role_permission
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_role_permission_pkey') THEN
        ALTER TABLE ONLY public.sys_role_permission ADD CONSTRAINT sys_role_permission_pkey PRIMARY KEY (id);
    END IF;
    
    -- llm_model
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'llm_model_pkey') THEN
        ALTER TABLE ONLY public.llm_model ADD CONSTRAINT llm_model_pkey PRIMARY KEY (id);
    END IF;
    
    -- mcp_tool
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'mcp_tool_pkey') THEN
        ALTER TABLE ONLY public.mcp_tool ADD CONSTRAINT mcp_tool_pkey PRIMARY KEY (id);
    END IF;
    
    -- mcp_tool_allowed_users
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'mcp_tool_allowed_users_pkey') THEN
        ALTER TABLE ONLY public.mcp_tool_allowed_users ADD CONSTRAINT mcp_tool_allowed_users_pkey PRIMARY KEY (id);
    END IF;
    
    -- crewai_agent
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crewai_agent_pkey') THEN
        ALTER TABLE ONLY public.crewai_agent ADD CONSTRAINT crewai_agent_pkey PRIMARY KEY (id);
    END IF;
    
    -- crewai_agent_allowed_users
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crewai_agent_allowed_users_pkey') THEN
        ALTER TABLE ONLY public.crewai_agent_allowed_users ADD CONSTRAINT crewai_agent_allowed_users_pkey PRIMARY KEY (id);
    END IF;
    
    -- agent_tool_relation
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'agent_tool_relation_pkey') THEN
        ALTER TABLE ONLY public.agent_tool_relation ADD CONSTRAINT agent_tool_relation_pkey PRIMARY KEY (id);
    END IF;
    
    -- chat_crew
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_crew_pkey') THEN
        ALTER TABLE ONLY public.chat_crew ADD CONSTRAINT chat_crew_pkey PRIMARY KEY (id);
    END IF;
    
    -- chat_crew_allowed_users
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_crew_allowed_users_pkey') THEN
        ALTER TABLE ONLY public.chat_crew_allowed_users ADD CONSTRAINT chat_crew_allowed_users_pkey PRIMARY KEY (id);
    END IF;
    
    -- chat_session
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_session_pkey') THEN
        ALTER TABLE ONLY public.chat_session ADD CONSTRAINT chat_session_pkey PRIMARY KEY (id);
    END IF;
    
    -- chat_message
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_message_pkey') THEN
        ALTER TABLE ONLY public.chat_message ADD CONSTRAINT chat_message_pkey PRIMARY KEY (id);
    END IF;
    
    -- crew_agent_assignment
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crew_agent_assignment_pkey') THEN
        ALTER TABLE ONLY public.crew_agent_assignment ADD CONSTRAINT crew_agent_assignment_pkey PRIMARY KEY (id);
    END IF;
    
    -- sys_dictionary
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_dictionary_item_pkey') THEN
        ALTER TABLE ONLY public.sys_dictionary ADD CONSTRAINT sys_dictionary_item_pkey PRIMARY KEY (id);
    END IF;
    
    -- django_admin_log
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'django_admin_log_pkey') THEN
        ALTER TABLE ONLY public.django_admin_log ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);
    END IF;
    
    -- django_migrations
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'django_migrations_pkey') THEN
        ALTER TABLE ONLY public.django_migrations ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);
    END IF;
    
    -- django_session
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'django_session_pkey') THEN
        ALTER TABLE ONLY public.django_session ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);
    END IF;

END $$;

-- =============================================
-- 唯一约束
-- =============================================

DO $$ 
BEGIN
    -- auth_user username unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_user_username_key') THEN
        ALTER TABLE ONLY public.auth_user ADD CONSTRAINT auth_user_username_key UNIQUE (username);
    END IF;
    
    -- auth_group name unique  
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_group_name_key') THEN
        ALTER TABLE ONLY public.auth_group ADD CONSTRAINT auth_group_name_key UNIQUE (name);
    END IF;
    
    -- sys_role name unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_role_name_key') THEN
        ALTER TABLE ONLY public.sys_role ADD CONSTRAINT sys_role_name_key UNIQUE (name);
    END IF;
    
    -- sys_permission name and codename unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_permission_name_key') THEN
        ALTER TABLE ONLY public.sys_permission ADD CONSTRAINT sys_permission_name_key UNIQUE (name);
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_permission_codename_key') THEN
        ALTER TABLE ONLY public.sys_permission ADD CONSTRAINT sys_permission_codename_key UNIQUE (codename);
    END IF;
    
    -- llm_model name unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'llm_model_name_key') THEN
        ALTER TABLE ONLY public.llm_model ADD CONSTRAINT llm_model_name_key UNIQUE (name);
    END IF;
    
    -- mcp_tool name unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'mcp_tool_name_key') THEN
        ALTER TABLE ONLY public.mcp_tool ADD CONSTRAINT mcp_tool_name_key UNIQUE (name);
    END IF;
    
    -- crewai_agent name unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crewai_agent_name_key') THEN
        ALTER TABLE ONLY public.crewai_agent ADD CONSTRAINT crewai_agent_name_key UNIQUE (name);
    END IF;
    
    -- chat_crew name unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_crew_name_key') THEN
        ALTER TABLE ONLY public.chat_crew ADD CONSTRAINT chat_crew_name_key UNIQUE (name);
    END IF;
    
    -- django_content_type app_label_model unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'django_content_type_app_label_model_76bd3d3b_uniq') THEN
        ALTER TABLE ONLY public.django_content_type ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);
    END IF;
    
    -- auth_permission content_type_id_codename unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'auth_permission_content_type_id_codename_01ab375a_uniq') THEN
        ALTER TABLE ONLY public.auth_permission ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);
    END IF;

END $$;

-- =============================================
-- 关联表唯一约束
-- =============================================

DO $$ 
BEGIN
    -- sys_user_role user_id_role_id unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_user_role_user_id_role_id_ec6ef495_uniq') THEN
        ALTER TABLE ONLY public.sys_user_role ADD CONSTRAINT sys_user_role_user_id_role_id_ec6ef495_uniq UNIQUE (user_id, role_id);
    END IF;
    
    -- sys_role_permission role_id_permission_id unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_role_permission_role_id_permission_id_169f0fe5_uniq') THEN
        ALTER TABLE ONLY public.sys_role_permission ADD CONSTRAINT sys_role_permission_role_id_permission_id_169f0fe5_uniq UNIQUE (role_id, permission_id);
    END IF;
    
    -- agent_tool_relation agent_id_tool_id unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'agent_tool_relation_agent_id_tool_id_c5ef775a_uniq') THEN
        ALTER TABLE ONLY public.agent_tool_relation ADD CONSTRAINT agent_tool_relation_agent_id_tool_id_c5ef775a_uniq UNIQUE (agent_id, tool_id);
    END IF;
    
    -- crew_agent_assignment crew_id_agent_id unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crew_agent_assignment_crew_id_agent_id_1578bb2c_uniq') THEN
        ALTER TABLE ONLY public.crew_agent_assignment ADD CONSTRAINT crew_agent_assignment_crew_id_agent_id_1578bb2c_uniq UNIQUE (crew_id, agent_id);
    END IF;
    
    -- sys_dictionary dict_type_parent_id_code unique
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_dictionary_dict_type_parent_id_code_a6c60d40_uniq') THEN
        ALTER TABLE ONLY public.sys_dictionary ADD CONSTRAINT sys_dictionary_dict_type_parent_id_code_a6c60d40_uniq UNIQUE (dict_type, parent_id, code);
    END IF;

END $$;

EOF

    if [ $? -eq 0 ]; then
        log_success "主键约束和唯一约束创建成功"
    else
        log_error "约束创建失败"
        exit 1
    fi
}

# 创建外键约束
create_foreign_keys() {
    log_info "创建外键约束..."
    
    $PSQL_CONN -d $DB_NAME << 'EOF'

-- =============================================
-- 外键约束
-- =============================================

DO $$ 
BEGIN
    -- sys_user_role 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_user_role_user_id_5f2fb964_fk_auth_user_id') THEN
        ALTER TABLE ONLY public.sys_user_role ADD CONSTRAINT sys_user_role_user_id_5f2fb964_fk_auth_user_id 
        FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_user_role_role_id_63624973_fk_sys_role_id') THEN
        ALTER TABLE ONLY public.sys_user_role ADD CONSTRAINT sys_user_role_role_id_63624973_fk_sys_role_id 
        FOREIGN KEY (role_id) REFERENCES public.sys_role(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- sys_role_permission 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_role_permission_role_id_ff575af9_fk_sys_role_id') THEN
        ALTER TABLE ONLY public.sys_role_permission ADD CONSTRAINT sys_role_permission_role_id_ff575af9_fk_sys_role_id 
        FOREIGN KEY (role_id) REFERENCES public.sys_role(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_role_permission_permission_id_84f4f7b6_fk_sys_permission_id') THEN
        ALTER TABLE ONLY public.sys_role_permission ADD CONSTRAINT sys_role_permission_permission_id_84f4f7b6_fk_sys_permission_id 
        FOREIGN KEY (permission_id) REFERENCES public.sys_permission(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- crewai_agent 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crewai_agent_owner_id_f4a9eb91_fk_auth_user_id') THEN
        ALTER TABLE ONLY public.crewai_agent ADD CONSTRAINT crewai_agent_owner_id_f4a9eb91_fk_auth_user_id 
        FOREIGN KEY (owner_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crewai_agent_llm_model_id_f630805c_fk_llm_model_id') THEN
        ALTER TABLE ONLY public.crewai_agent ADD CONSTRAINT crewai_agent_llm_model_id_f630805c_fk_llm_model_id 
        FOREIGN KEY (llm_model_id) REFERENCES public.llm_model(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crewai_agent_function_calling_llm_id_a891b56f_fk_llm_model_id') THEN
        ALTER TABLE ONLY public.crewai_agent ADD CONSTRAINT crewai_agent_function_calling_llm_id_a891b56f_fk_llm_model_id 
        FOREIGN KEY (function_calling_llm_id) REFERENCES public.llm_model(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- agent_tool_relation 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'agent_tool_relation_agent_id_a3ab206d_fk_crewai_agent_id') THEN
        ALTER TABLE ONLY public.agent_tool_relation ADD CONSTRAINT agent_tool_relation_agent_id_a3ab206d_fk_crewai_agent_id 
        FOREIGN KEY (agent_id) REFERENCES public.crewai_agent(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'agent_tool_relation_tool_id_0a9e04ff_fk_mcp_tool_id') THEN
        ALTER TABLE ONLY public.agent_tool_relation ADD CONSTRAINT agent_tool_relation_tool_id_0a9e04ff_fk_mcp_tool_id 
        FOREIGN KEY (tool_id) REFERENCES public.mcp_tool(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- chat_crew 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_crew_owner_id_1f0fddd5_fk_auth_user_id') THEN
        ALTER TABLE ONLY public.chat_crew ADD CONSTRAINT chat_crew_owner_id_1f0fddd5_fk_auth_user_id 
        FOREIGN KEY (owner_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- chat_session 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_session_user_id_b860f903_fk_auth_user_id') THEN
        ALTER TABLE ONLY public.chat_session ADD CONSTRAINT chat_session_user_id_b860f903_fk_auth_user_id 
        FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_session_crew_id_a18a4b68_fk_chat_crew_id') THEN
        ALTER TABLE ONLY public.chat_session ADD CONSTRAINT chat_session_crew_id_a18a4b68_fk_chat_crew_id 
        FOREIGN KEY (crew_id) REFERENCES public.chat_crew(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- chat_message 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'chat_message_session_id_9abc6edf_fk_chat_session_id') THEN
        ALTER TABLE ONLY public.chat_message ADD CONSTRAINT chat_message_session_id_9abc6edf_fk_chat_session_id 
        FOREIGN KEY (session_id) REFERENCES public.chat_session(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- crew_agent_assignment 外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crew_agent_assignment_crew_id_9348f2e2_fk_chat_crew_id') THEN
        ALTER TABLE ONLY public.crew_agent_assignment ADD CONSTRAINT crew_agent_assignment_crew_id_9348f2e2_fk_chat_crew_id 
        FOREIGN KEY (crew_id) REFERENCES public.chat_crew(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'crew_agent_assignment_agent_id_dcacfb29_fk_crewai_agent_id') THEN
        ALTER TABLE ONLY public.crew_agent_assignment ADD CONSTRAINT crew_agent_assignment_agent_id_dcacfb29_fk_crewai_agent_id 
        FOREIGN KEY (agent_id) REFERENCES public.crewai_agent(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;
    
    -- sys_dictionary 自引用外键
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'sys_dictionary_item_parent_id_2805a220_fk_sys_dicti') THEN
        ALTER TABLE ONLY public.sys_dictionary ADD CONSTRAINT sys_dictionary_item_parent_id_2805a220_fk_sys_dicti 
        FOREIGN KEY (parent_id) REFERENCES public.sys_dictionary(id) DEFERRABLE INITIALLY DEFERRED;
    END IF;

END $$;

EOF

    if [ $? -eq 0 ]; then
        log_success "外键约束创建成功"
    else
        log_error "外键约束创建失败"
        exit 1
    fi
}

# 创建索引
create_indexes() {
    log_info "创建索引..."
    
    $PSQL_CONN -d $DB_NAME << 'EOF'

-- =============================================
-- 重要索引
-- =============================================

-- 用户表索引
CREATE INDEX IF NOT EXISTS auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS auth_user_email_idx ON public.auth_user USING btree (email);
CREATE INDEX IF NOT EXISTS auth_user_is_active_idx ON public.auth_user USING btree (is_active);

-- 角色权限索引  
CREATE INDEX IF NOT EXISTS sys_role_name_565a2297_like ON public.sys_role USING btree (name varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS sys_permission_name_37bc0cd3_like ON public.sys_permission USING btree (name varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS sys_permission_codename_384fc775_like ON public.sys_permission USING btree (codename varchar_pattern_ops);

-- 用户角色关联表索引
CREATE INDEX IF NOT EXISTS sys_user_role_user_id_5f2fb964 ON public.sys_user_role USING btree (user_id);
CREATE INDEX IF NOT EXISTS sys_user_role_role_id_63624973 ON public.sys_user_role USING btree (role_id);

-- 角色权限关联表索引
CREATE INDEX IF NOT EXISTS sys_role_permission_role_id_ff575af9 ON public.sys_role_permission USING btree (role_id);
CREATE INDEX IF NOT EXISTS sys_role_permission_permission_id_84f4f7b6 ON public.sys_role_permission USING btree (permission_id);

-- LLM 模型索引
CREATE INDEX IF NOT EXISTS llm_model_name_5d46c4ce_like ON public.llm_model USING btree (name varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS llm_model_provide_41218d_idx ON public.llm_model USING btree (provider);
CREATE INDEX IF NOT EXISTS llm_model_is_acti_691f0d_idx ON public.llm_model USING btree (is_active);
CREATE INDEX IF NOT EXISTS llm_model_is_avai_9e6d97_idx ON public.llm_model USING btree (is_available);

-- MCP 工具索引
CREATE INDEX IF NOT EXISTS mcp_tool_name_82eeb064_like ON public.mcp_tool USING btree (name varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS mcp_tool_server__d3fa8b_idx ON public.mcp_tool USING btree (server_type);
CREATE INDEX IF NOT EXISTS mcp_tool_status_31eaee_idx ON public.mcp_tool USING btree (status);
CREATE INDEX IF NOT EXISTS mcp_tool_is_acti_c3b240_idx ON public.mcp_tool USING btree (is_active);
CREATE INDEX IF NOT EXISTS mcp_tool_is_publ_47d300_idx ON public.mcp_tool USING btree (is_public);

-- CrewAI Agent 索引
CREATE INDEX IF NOT EXISTS crewai_agent_name_e920e9d6_like ON public.crewai_agent USING btree (name varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS crewai_agent_owner_id_f4a9eb91 ON public.crewai_agent USING btree (owner_id);
CREATE INDEX IF NOT EXISTS crewai_agent_llm_model_id_f630805c ON public.crewai_agent USING btree (llm_model_id);
CREATE INDEX IF NOT EXISTS crewai_agen_is_acti_7235fb_idx ON public.crewai_agent USING btree (is_active);
CREATE INDEX IF NOT EXISTS crewai_agen_is_publ_04b3bb_idx ON public.crewai_agent USING btree (is_public);
CREATE INDEX IF NOT EXISTS crewai_agen_status_274771_idx ON public.crewai_agent USING btree (status);

-- Agent 工具关联表索引
CREATE INDEX IF NOT EXISTS agent_tool_relation_agent_id_a3ab206d ON public.agent_tool_relation USING btree (agent_id);
CREATE INDEX IF NOT EXISTS agent_tool_relation_tool_id_0a9e04ff ON public.agent_tool_relation USING btree (tool_id);
CREATE INDEX IF NOT EXISTS agent_tool__status_f8a435_idx ON public.agent_tool_relation USING btree (status);

-- Chat 相关索引
CREATE INDEX IF NOT EXISTS chat_crew_name_19cf1559_like ON public.chat_crew USING btree (name varchar_pattern_ops);
CREATE INDEX IF NOT EXISTS chat_crew_owner_id_1f0fddd5 ON public.chat_crew USING btree (owner_id);
CREATE INDEX IF NOT EXISTS chat_crew_is_acti_9896f9_idx ON public.chat_crew USING btree (is_active);

CREATE INDEX IF NOT EXISTS chat_session_user_id_b860f903 ON public.chat_session USING btree (user_id);
CREATE INDEX IF NOT EXISTS chat_session_crew_id_a18a4b68 ON public.chat_session USING btree (crew_id);
CREATE INDEX IF NOT EXISTS chat_sessio_status_5fbc1f_idx ON public.chat_session USING btree (status);

CREATE INDEX IF NOT EXISTS chat_message_session_id_9abc6edf ON public.chat_message USING btree (session_id);
CREATE INDEX IF NOT EXISTS chat_messag_session_4940cf_idx ON public.chat_message USING btree (session_id, created_at);

-- 数据字典索引
CREATE INDEX IF NOT EXISTS sys_dictionary_item_parent_id_2805a220 ON public.sys_dictionary USING btree (parent_id);
CREATE INDEX IF NOT EXISTS sys_dictionary_dict_type_idx ON public.sys_dictionary USING btree (dict_type);
CREATE INDEX IF NOT EXISTS sys_dictionary_is_active_idx ON public.sys_dictionary USING btree (is_active);

-- Django 会话索引
CREATE INDEX IF NOT EXISTS django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);
CREATE INDEX IF NOT EXISTS django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);

EOF

    if [ $? -eq 0 ]; then
        log_success "索引创建成功"
    else
        log_error "索引创建失败"
        exit 1
    fi
}

# 初始化现有数据 (基于本地数据库导出)
init_data() {
    log_info "初始化现有数据 (从本地数据库同步)..."
    
    # 临时禁用触发器以避免约束冲突
    $PSQL_CONN -d $DB_NAME -c "SET session_replication_role = replica;" 2>/dev/null || true
    
    $PSQL_CONN -d $DB_NAME << 'EOF'

-- =============================================
-- Django 内容类型数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.django_content_type;
INSERT INTO public.django_content_type (id, app_label, model) VALUES 
(1, 'admin', 'logentry'),
(2, 'auth', 'permission'),
(3, 'auth', 'group'),
(4, 'contenttypes', 'contenttype'),
(5, 'sessions', 'session'),
(6, 'crewaiplatform', 'user'),
(7, 'crewaiplatform', 'role'),
(8, 'crewaiplatform', 'permission'),
(9, 'crewaiplatform', 'userrole'),
(10, 'crewaiplatform', 'rolepermission'),
(11, 'crewaiplatform', 'llmmodel'),
(12, 'crewaiplatform', 'mcptool'),
(13, 'crewaiplatform', 'crewaiagent'),
(14, 'crewaiplatform', 'agenttoolrelation'),
(15, 'crewaiplatform', 'dictionary'),
(16, 'crewaiplatform', 'chatcrew'),
(17, 'crewaiplatform', 'chatsession'),
(18, 'crewaiplatform', 'chatmessage'),
(19, 'crewaiplatform', 'crewagentassignment');

-- 重置序列
SELECT setval('public.django_content_type_id_seq', (SELECT MAX(id) FROM public.django_content_type));

-- =============================================
-- Django 权限数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.auth_permission;
INSERT INTO public.auth_permission (id, name, content_type_id, codename) VALUES 
(1, 'Can add log entry', 1, 'add_logentry'),
(2, 'Can change log entry', 1, 'change_logentry'),
(3, 'Can delete log entry', 1, 'delete_logentry'),
(4, 'Can view log entry', 1, 'view_logentry'),
(5, 'Can add permission', 2, 'add_permission'),
(6, 'Can change permission', 2, 'change_permission'),
(7, 'Can delete permission', 2, 'delete_permission'),
(8, 'Can view permission', 2, 'view_permission'),
(9, 'Can add group', 3, 'add_group'),
(10, 'Can change group', 3, 'change_group'),
(11, 'Can delete group', 3, 'delete_group'),
(12, 'Can view group', 3, 'view_group'),
(13, 'Can add content type', 4, 'add_contenttype'),
(14, 'Can change content type', 4, 'change_contenttype'),
(15, 'Can delete content type', 4, 'delete_contenttype'),
(16, 'Can view content type', 4, 'view_contenttype'),
(17, 'Can add session', 5, 'add_session'),
(18, 'Can change session', 5, 'change_session'),
(19, 'Can delete session', 5, 'delete_session'),
(20, 'Can view session', 5, 'view_session'),
(21, 'Can add 用户', 6, 'add_user'),
(22, 'Can change 用户', 6, 'change_user'),
(23, 'Can delete 用户', 6, 'delete_user'),
(24, 'Can view 用户', 6, 'view_user'),
(25, 'Can add 角色', 7, 'add_role'),
(26, 'Can change 角色', 7, 'change_role'),
(27, 'Can delete 角色', 7, 'delete_role'),
(28, 'Can view 角色', 7, 'view_role'),
(29, 'Can add 权限', 8, 'add_permission'),
(30, 'Can change 权限', 8, 'change_permission'),
(31, 'Can delete 权限', 8, 'delete_permission'),
(32, 'Can view 权限', 8, 'view_permission'),
(33, 'Can add 用户角色关联', 9, 'add_userrole'),
(34, 'Can change 用户角色关联', 9, 'change_userrole'),
(35, 'Can delete 用户角色关联', 9, 'delete_userrole'),
(36, 'Can view 用户角色关联', 9, 'view_userrole'),
(37, 'Can add 角色权限关联', 10, 'add_rolepermission'),
(38, 'Can change 角色权限关联', 10, 'change_rolepermission'),
(39, 'Can delete 角色权限关联', 10, 'delete_rolepermission'),
(40, 'Can view 角色权限关联', 10, 'view_rolepermission'),
(41, 'Can add LLM模型配置', 11, 'add_llmmodel'),
(42, 'Can change LLM模型配置', 11, 'change_llmmodel'),
(43, 'Can delete LLM模型配置', 11, 'delete_llmmodel'),
(44, 'Can view LLM模型配置', 11, 'view_llmmodel'),
(45, 'Can add MCP工具配置', 12, 'add_mcptool'),
(46, 'Can change MCP工具配置', 12, 'change_mcptool'),
(47, 'Can delete MCP工具配置', 12, 'delete_mcptool'),
(48, 'Can view MCP工具配置', 12, 'view_mcptool'),
(49, 'Can add CrewAI Agent', 13, 'add_crewaiagent'),
(50, 'Can change CrewAI Agent', 13, 'change_crewaiagent'),
(51, 'Can delete CrewAI Agent', 13, 'delete_crewaiagent'),
(52, 'Can view CrewAI Agent', 13, 'view_crewaiagent'),
(53, 'Can add Agent工具关联', 14, 'add_agenttoolrelation'),
(54, 'Can change Agent工具关联', 14, 'change_agenttoolrelation'),
(55, 'Can delete Agent工具关联', 14, 'delete_agenttoolrelation'),
(56, 'Can view Agent工具关联', 14, 'view_agenttoolrelation'),
(57, 'Can add 数据字典', 15, 'add_dictionary'),
(58, 'Can change 数据字典', 15, 'change_dictionary'),
(59, 'Can delete 数据字典', 15, 'delete_dictionary'),
(60, 'Can view 数据字典', 15, 'view_dictionary'),
(61, 'Can add Chat Crew', 16, 'add_chatcrew'),
(62, 'Can change Chat Crew', 16, 'change_chatcrew'),
(63, 'Can delete Chat Crew', 16, 'delete_chatcrew'),
(64, 'Can view Chat Crew', 16, 'view_chatcrew'),
(65, 'Can add 聊天会话', 17, 'add_chatsession'),
(66, 'Can change 聊天会话', 17, 'change_chatsession'),
(67, 'Can delete 聊天会话', 17, 'delete_chatsession'),
(68, 'Can view 聊天会话', 17, 'view_chatsession'),
(69, 'Can add 聊天消息', 18, 'add_chatmessage'),
(70, 'Can change 聊天消息', 18, 'change_chatmessage'),
(71, 'Can delete 聊天消息', 18, 'delete_chatmessage'),
(72, 'Can view 聊天消息', 18, 'view_chatmessage'),
(73, 'Can add Crew Agent分配', 19, 'add_crewagentassignment'),
(74, 'Can change Crew Agent分配', 19, 'change_crewagentassignment'),
(75, 'Can delete Crew Agent分配', 19, 'delete_crewagentassignment'),
(76, 'Can view Crew Agent分配', 19, 'view_crewagentassignment');

-- 重置序列
SELECT setval('public.auth_permission_id_seq', (SELECT MAX(id) FROM public.auth_permission));

-- =============================================
-- 用户数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.auth_user;
INSERT INTO public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined, phone, avatar, created_at, updated_at) VALUES 
(1, 'pbkdf2_sha256$600000$aAXBf2RZ8urEjE9bWHWhFw$F74pKGRz7fvNY9zPQZF1+wX8MbemgHejUFJSVlDyfns=', NULL, true, 'admin', '', '', 'admin@example.com', true, true, '2025-08-05 21:01:52.993427+08', '', '', '2025-08-05 21:01:52.99356+08', '2025-08-05 21:01:57.150709+08'),
(2, '', NULL, false, 'test_user', '', '', 'test@example.com', false, true, '2025-08-05 23:49:45.707032+08', '', '', '2025-08-05 23:49:45.707325+08', '2025-08-05 23:49:45.707329+08'),
(3, 'pbkdf2_sha256$600000$MOwdqPJQLQyAvd7XG4MUia$A4b6diNVOWUh60KqazcwsWYrYmc6p6Dpvd+I9W6lsfQ=', NULL, false, 'zhangyoujie', '', '', 'zhangyoujie@qq.com', false, true, '2025-08-06 22:25:35.249564+08', '', '', '2025-08-06 22:25:35.319103+08', '2025-08-06 22:25:35.319114+08');

-- 重置序列
SELECT setval('public.auth_user_id_seq', (SELECT MAX(id) FROM public.auth_user));

-- =============================================
-- LLM模型数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.llm_model;
INSERT INTO public.llm_model (id, name, provider, model_name, description, langchain_class, api_base_url, api_key, api_version, temperature, max_tokens, timeout, max_retries, extra_kwargs, model_kwargs, model_info, last_validated, is_available, validation_error, is_active, created_at, updated_at) VALUES 
(1, 'OpenAI GPT-4', 'openai', 'gpt-4', 'OpenAI GPT-4 模型，适用于复杂的推理和生成任务', 'ChatOpenAI', '', 'gAAAAABokgHlObSbqdUYDuwxTK5SF9wVkV9XSDOVDjEltUfTd-gpq0cOjKY40C4qx4AJtSe4rl41eSEZT6VtINhW90YDCtZs1649_lol-qaUt4h0MfDvHJDz3T_WH7oTZuZfWP0tFPya', '', 0.7, 4096, 30, 2, '{}', '{}', '{}', NULL, false, 'Error code: 401 - {''error'': {''message'': ''Incorrect API key provided. '', ''type'': ''invalid_request_error'', ''param'': None, ''code'': ''invalid_api_key''}, ''request_id'': ''1f2a2e47-e966-9910-b1e3-ee76135dddcf''}', true, '2025-08-05 21:06:45.709493+08', '2025-08-06 21:14:13.759305+08'),
(2, 'OpenAI GPT-3.5 Turbo', 'openai', 'gpt-3.5-turbo', 'OpenAI GPT-3.5 Turbo 模型，高性价比的对话模型', 'ChatOpenAI', '', 'gAAAAABokgHlQjtRQr4OPEiLnqd5_NAYOpAZK3tSxHPtQrIwISjj9rDt3ATj-fF_RPN1byF7afuEUrnHszOzmgjskTyvnrkMl0RJop-MCF16lefjgwU87DFyABoq88fIqEbc7hLSwLGK', '', 0.7, 4096, 30, 2, '{}', '{}', '{}', NULL, false, 'Error code: 401 - {''error'': {''message'': ''Incorrect API key provided. '', ''type'': ''invalid_request_error'', ''param'': None, ''code'': ''invalid_api_key''}, ''request_id'': ''0d098ca9-215f-90fc-bb58-73a203b8d73f''}', true, '2025-08-05 21:06:45.712826+08', '2025-08-06 21:14:13.708058+08'),
(3, 'Anthropic Claude-3.5 Sonnet', 'anthropic', 'claude-3-5-sonnet-20241022', 'Anthropic Claude-3.5 Sonnet 模型，擅长分析和推理', 'ChatAnthropic', '', 'gAAAAABokgHlojU5YX_G5bH3eijkjWYHXq5_LNQZNKgCBRxsjtolaRJ1ulvzMRRPvIK1mERj7vllQZidfgWkYyK992rfd_ix19-IssFMrVgG5NNtol-1YDFxz_Rygw3qBaEyjDScEL-a', '', 0.7, 4096, 30, 2, '{}', '{}', '{}', NULL, false, 'Error code: 401 - {''error'': ''Unauthorized: No valid credentials provided''}', true, '2025-08-05 21:06:45.71406+08', '2025-08-06 21:14:13.5789+08'),
(4, 'Azure OpenAI GPT-4', 'azure_openai', 'gpt-4', 'Azure OpenAI GPT-4 模型', 'AzureChatOpenAI', '', 'gAAAAABokgHlqe9m2gZgS_r2ogOCvveYaJRMQQtYnQkZShE83oMQthk5TnBnTMxKFvgOfo-_ioiIADopNPl7y8nY6Tlq743fRTJExV4u5JgwGo3aj-_wgAbrmwXYiqLgHgIM0unFo0sO', '2024-02-01', 0.7, 4096, 30, 2, '{}', '{}', '{}', NULL, false, 'Connection error.', true, '2025-08-05 21:06:45.715134+08', '2025-08-06 21:14:10.322088+08'),
(5, 'Ollama Llama3.1', 'ollama', 'llama3.1', 'Ollama 本地运行的 Llama3.1 模型', 'ChatOllama', 'http://localhost:11434', 'gAAAAABokgHlh56EvjUakewzBdl-z44R-7u9unxblPhlxtyiRoACv5MqqhEE2MWcK7MiGm5v3dQus4XMj2Z7uobw_WOO5jY_srk3PMA7r8DaDS5fMXQraQg=', '', 0.7, NULL, 60, 2, '{}', '{}', '{}', NULL, false, '创建LangChain模型失败: 1 validation error for ChatOllama\nmodel\n  Field required [type=missing, input_value={''model_name'': ''llama3.1''...http://localhost:11434''}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing', true, '2025-08-05 21:06:45.71634+08', '2025-08-06 21:14:09.078767+08'),
(6, 'Kimi', 'moonshot', 'kimi-k2-0711-preview', '', 'ChatOpenAI', 'https://api.moonshot.cn/v1', 'gAAAAABokg8B6IjDIhRI8KZ8WafSA6PzyzPjTubmZUHhInV1YQnLGifH79_QOBh9Lq-WsA3X7mqvYtCgRd7eQOwanFOFc6G0DFgIwLB3k007m6oEAUEthajJJEG_sJBkedE1mVM-fiLzoxcfs81rpEZTFXICI2phgQ==', '', 0.7, NULL, 30, 2, '{}', '{}', '{}', '2025-08-06 22:27:22.87688+08', true, '', true, '2025-08-05 21:56:19.172587+08', '2025-08-06 22:27:22.87761+08'),
(7, 'test_llm', 'openai', 'gpt-3.5-turbo', '测试用LLM模型', 'ChatOpenAI', '', '', '', 0.7, NULL, 30, 2, '{}', '{}', '{}', NULL, false, 'Error code: 404 - {''error'': {''message'': ''The model `gpt-3.5-turbo` does not exist or you do not have access to it.'', ''type'': ''invalid_request_error'', ''param'': None, ''code'': ''model_not_found''}, ''request_id'': ''377fac65-975d-984d-a023-49875de786b3''}', true, '2025-08-05 23:49:45.71024+08', '2025-08-06 21:14:06.111174+08');

-- 重置序列
SELECT setval('public.llm_model_id_seq', (SELECT MAX(id) FROM public.llm_model));

-- =============================================
-- MCP工具数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.mcp_tool;
INSERT INTO public.mcp_tool (id, name, display_name, description, version, server_type, connection_config, tool_schema, connection_timeout, request_timeout, max_retries, retry_delay, health_check_enabled, health_check_interval, health_check_method, status, last_health_check, last_error, response_time_ms, total_calls, success_calls, is_active, is_public, created_at, updated_at) VALUES 
(1, 'filesystem', '文件系统工具', '提供文件和目录操作功能，包括读取、写入、列举文件等', '1.0.0', 'stdio', '{"env": {"DEBUG": "false"}, "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"], "command": "npx"}', '{"tools": [{"name": "read_file", "description": "读取文件内容", "inputSchema": {"type": "object", "required": ["path"], "properties": {"path": {"type": "string", "description": "文件路径"}}}}, {"name": "write_file", "description": "写入文件内容", "inputSchema": {"type": "object", "required": ["path", "content"], "properties": {"path": {"type": "string", "description": "文件路径"}, "content": {"type": "string", "description": "文件内容"}}}}, {"name": "list_directory", "description": "列举目录内容", "inputSchema": {"type": "object", "required": ["path"], "properties": {"path": {"type": "string", "description": "目录路径"}}}}]}', 30, 60, 3, 1, true, 300, 'ping', 'unknown', NULL, '', NULL, 0, 0, false, true, '2025-08-05 21:06:45.90144+08', '2025-08-05 21:06:45.90155+08'),
(2, 'brave_search', 'Brave 搜索工具', '使用 Brave Search API 进行网络搜索', '1.0.0', 'stdio', '{"env": {"BRAVE_API_KEY": "your-brave-api-key"}, "args": ["-y", "@modelcontextprotocol/server-brave-search"], "command": "npx"}', '{"tools": [{"name": "brave_web_search", "description": "使用Brave搜索引擎搜索网络内容", "inputSchema": {"type": "object", "required": ["query"], "properties": {"count": {"type": "integer", "default": 10, "description": "返回结果数量"}, "query": {"type": "string", "description": "搜索查询"}}}}]}', 30, 60, 3, 1, true, 300, 'ping', 'unknown', NULL, '', NULL, 0, 0, false, true, '2025-08-05 21:06:45.904681+08', '2025-08-05 21:06:45.904685+08'),
(3, 'github', 'GitHub 工具', '与GitHub仓库交互，包括搜索、读取文件、创建issues等', '1.0.0', 'stdio', '{"env": {"GITHUB_PERSONAL_ACCESS_TOKEN": "your-github-token"}, "args": ["-y", "@modelcontextprotocol/server-github"], "command": "npx"}', '{"tools": [{"name": "search_repositories", "description": "搜索GitHub仓库", "inputSchema": {"type": "object", "required": ["query"], "properties": {"sort": {"type": "string", "description": "排序方式"}, "query": {"type": "string", "description": "搜索查询"}}}}, {"name": "get_file_contents", "description": "获取仓库文件内容", "inputSchema": {"type": "object", "required": ["owner", "repo", "path"], "properties": {"path": {"type": "string", "description": "文件路径"}, "repo": {"type": "string", "description": "仓库名称"}, "owner": {"type": "string", "description": "仓库所有者"}}}}]}', 30, 60, 3, 1, true, 300, 'ping', 'unknown', NULL, '', NULL, 0, 0, false, true, '2025-08-05 21:06:45.906192+08', '2025-08-05 21:06:45.906195+08'),
(4, 'sqlite', 'SQLite 数据库工具', '操作SQLite数据库，执行查询和更新操作', '1.0.0', 'stdio', '{"env": {}, "args": ["-y", "@modelcontextprotocol/server-sqlite", "/tmp/example.db"], "command": "npx"}', '{"tools": [{"name": "query", "description": "执行SQL查询", "inputSchema": {"type": "object", "required": ["sql"], "properties": {"sql": {"type": "string", "description": "SQL查询语句"}}}}, {"name": "execute", "description": "执行SQL命令（INSERT、UPDATE、DELETE等）", "inputSchema": {"type": "object", "required": ["sql"], "properties": {"sql": {"type": "string", "description": "SQL命令"}}}}]}', 30, 60, 3, 1, true, 300, 'ping', 'unhealthy', '2025-08-05 22:54:45.169292+08', '命令执行失败: npm error code E404\nnpm error 404 Not Found - GET https://registry.npmjs.org/@modelcontextprotocol%2fserver-sqlite - Not found\nnpm error 404\nnpm error 404  ''@modelcontextprotocol/server-sqlite@*'' is not in this registry.\nnpm error 404\nnpm error 404 Note that you can also install from a\nnpm error 404 tarball, folder, http url, or git url.\nnpm error A complete log of this run can be found in: /Users/zhangyoujie/.npm/_logs/2025-08-05T14_54_36_311Z-debug-0.log\n', NULL, 0, 0, false, true, '2025-08-05 21:06:45.907335+08', '2025-08-05 22:54:45.169798+08'),
(5, '美食推荐工具', '美食推荐工具', '美食推荐工具', 'v1.0.0', 'sse', '{"url": "https://mcp.api-inference.modelscope.net/185ad13f65744b/sse"}', '{}', 30, 60, 3, 1, true, 300, 'ping', 'healthy', '2025-08-05 23:05:12.35791+08', '', 7320, 0, 0, true, false, '2025-08-05 23:05:00.862701+08', '2025-08-05 23:05:12.35819+08'),
(6, 'tavily', 'tavily', 'tavily搜索', 'v1.0.0', 'sse', '{"url": "https://mcp.api-inference.modelscope.net/ba5e25a776cd4f/sse"}', '{}', 30, 60, 3, 1, true, 300, 'ping', 'healthy', '2025-08-05 23:44:44.270844+08', '', 4055, 0, 0, true, false, '2025-08-05 23:44:37.504814+08', '2025-08-05 23:44:44.271089+08');

-- 重置序列
SELECT setval('public.mcp_tool_id_seq', (SELECT MAX(id) FROM public.mcp_tool));

-- =============================================
-- CrewAI Agent数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.crewai_agent;
INSERT INTO public.crewai_agent (id, name, display_name, description, role, goal, backstory, "verbose", memory, max_iter, max_rpm, max_execution_time, max_retry_limit, allow_delegation, respect_context_window, use_system_prompt, multimodal, inject_date, date_format, reasoning, max_reasoning_attempts, step_callback, enable_monitoring, custom_instructions, agent_kwargs, status, total_tasks, completed_tasks, total_execution_time, last_execution, last_error, is_active, is_public, created_at, updated_at, function_calling_llm_id, llm_model_id, owner_id) VALUES 
(1, '美食推荐大师', '美食推荐大师', '美食推荐大师', '美食推荐大师', '美食推荐大师', '美食推荐大师', false, false, 20, NULL, NULL, 2, false, true, true, false, false, '%Y-%m-%d %H:%M:%S', false, 3, '', true, '', '{}', 'inactive', 0, 0, 0, NULL, '', true, true, '2025-08-05 23:05:51.779904+08', '2025-08-05 23:45:02.891485+08', 6, 6, 1),
(2, 'test_agent', '测试Agent', '', '测试角色', '测试目标', '', false, false, 20, NULL, NULL, 2, false, true, true, false, false, '%Y-%m-%d %H:%M:%S', false, 3, '', true, '', '{}', 'inactive', 0, 0, 0, NULL, '', true, false, '2025-08-05 23:49:45.714775+08', '2025-08-05 23:49:45.714794+08', NULL, 7, 2);

-- 重置序列
SELECT setval('public.crewai_agent_id_seq', (SELECT MAX(id) FROM public.crewai_agent));

-- =============================================
-- Agent工具关联数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.agent_tool_relation;
INSERT INTO public.agent_tool_relation (id, "order", is_required, is_fallback, max_calls_per_task, config_override, prompt_template, permission_level, allowed_operations, restricted_paths, status, total_calls, successful_calls, total_execution_time, last_used, last_error, config_version, assigned_at, updated_at, agent_id, tool_id) VALUES 
(1, 1, false, false, NULL, '{}', '', 'read', '[]', '[]', 'active', 0, 0, 0, NULL, '', '1.0', '2025-08-05 23:05:56.432262+08', '2025-08-05 23:05:56.432285+08', 1, 5),
(2, 2, false, false, NULL, '{}', '', 'read', '[]', '[]', 'active', 0, 0, 0, NULL, '', '1.0', '2025-08-05 23:44:56.869004+08', '2025-08-05 23:44:56.869016+08', 1, 6),
(3, 1, false, false, NULL, '{}', '', 'read', '[]', '[]', 'active', 0, 0, 0, NULL, '', '1.0', '2025-08-05 23:50:37.852764+08', '2025-08-05 23:50:37.852796+08', 2, 5),
(4, 2, false, false, NULL, '{}', '', 'read', '[]', '[]', 'active', 0, 0, 0, NULL, '', '1.0', '2025-08-05 23:50:40.957139+08', '2025-08-05 23:50:40.957159+08', 2, 6);

-- 重置序列
SELECT setval('public.agent_tool_relation_id_seq', (SELECT MAX(id) FROM public.agent_tool_relation));

-- =============================================
-- 系统角色和权限数据
-- =============================================

DELETE FROM public.sys_role;
INSERT INTO public.sys_role (id, name, description, created_at, updated_at) VALUES 
(1, '超级管理员', '系统最高权限管理员，拥有所有功能权限', '2025-08-06 19:08:57.305926+08', '2025-08-06 19:08:57.305932+08'),
(2, '管理员', '系统管理员，拥有用户管理和基础功能权限', '2025-08-06 19:08:57.307078+08', '2025-08-06 19:08:57.307082+08'),
(3, '普通用户', '普通用户，拥有基础查看和操作权限', '2025-08-06 19:08:57.307686+08', '2025-08-06 19:08:57.30769+08');

SELECT setval('public.sys_role_id_seq', (SELECT MAX(id) FROM public.sys_role));

DELETE FROM public.sys_permission;
INSERT INTO public.sys_permission (id, name, codename, description, created_at, updated_at) VALUES 
(1, '用户管理', 'manage_users', '管理系统用户，包括创建、修改、删除用户', '2025-08-06 19:08:57.309029+08', '2025-08-06 19:08:57.309033+08'),
(2, '角色管理', 'manage_roles', '管理系统角色，包括创建、修改、删除角色', '2025-08-06 19:08:57.309561+08', '2025-08-06 19:08:57.309564+08'),
(3, '权限管理', 'manage_permissions', '管理系统权限，包括分配权限给角色', '2025-08-06 19:08:57.310069+08', '2025-08-06 19:08:57.310073+08'),
(4, '查看仪表盘', 'view_dashboard', '查看系统仪表盘和统计信息', '2025-08-06 19:08:57.310632+08', '2025-08-06 19:08:57.310636+08'),
(5, '系统配置', 'system_config', '修改系统配置参数', '2025-08-06 19:08:57.311129+08', '2025-08-06 19:08:57.311132+08'),
(6, 'LLM模型管理', 'manage_llm_models', '管理LLM模型，包括添加、配置、删除模型', '2025-08-06 19:08:57.311642+08', '2025-08-06 19:08:57.311645+08'),
(7, 'MCP工具管理', 'manage_mcp_tools', '管理MCP工具，包括添加、配置、删除工具', '2025-08-06 19:08:57.31213+08', '2025-08-06 19:08:57.312133+08'),
(8, 'Agent管理', 'manage_agents', '管理CrewAI Agent，包括创建、配置、删除Agent', '2025-08-06 19:08:57.312632+08', '2025-08-06 19:08:57.312636+08'),
(9, 'Crew管理', 'manage_crews', '管理Chat Crew，包括创建、配置、删除Crew', '2025-08-06 19:08:57.313125+08', '2025-08-06 19:08:57.313128+08'),
(10, '聊天功能', 'use_chat', '使用聊天功能，与Agent和Crew进行对话', '2025-08-06 19:08:57.313631+08', '2025-08-06 19:08:57.313634+08');

SELECT setval('public.sys_permission_id_seq', (SELECT MAX(id) FROM public.sys_permission));

-- 角色权限关联
DELETE FROM public.sys_role_permission;
INSERT INTO public.sys_role_permission (role_id, permission_id, assigned_at) VALUES 
(1, 1, '2025-08-06 19:08:57.314693+08'),
(1, 2, '2025-08-06 19:08:57.314945+08'),
(1, 3, '2025-08-06 19:08:57.315154+08'),
(1, 4, '2025-08-06 19:08:57.315362+08'),
(1, 5, '2025-08-06 19:08:57.315567+08'),
(1, 6, '2025-08-06 19:08:57.315772+08'),
(1, 7, '2025-08-06 19:08:57.315976+08'),
(1, 8, '2025-08-06 19:08:57.316181+08'),
(1, 9, '2025-08-06 19:08:57.316385+08'),
(1, 10, '2025-08-06 19:08:57.316589+08'),
(2, 1, '2025-08-06 19:08:57.31712+08'),
(2, 4, '2025-08-06 19:08:57.317325+08'),
(2, 6, '2025-08-06 19:08:57.317529+08'),
(2, 7, '2025-08-06 19:08:57.317732+08'),
(2, 8, '2025-08-06 19:08:57.317935+08'),
(2, 10, '2025-08-06 19:08:57.318138+08'),
(3, 4, '2025-08-06 19:08:57.318509+08'),
(3, 10, '2025-08-06 19:08:57.318714+08');

-- 用户角色关联
DELETE FROM public.sys_user_role;
INSERT INTO public.sys_user_role (user_id, role_id, assigned_at) VALUES 
(1, 1, '2025-08-06 19:08:57.319871+08');

-- =============================================
-- 数据字典数据 (从本地数据库导出)
-- =============================================

DELETE FROM public.sys_dictionary;
INSERT INTO public.sys_dictionary (id, code, name, dict_type, value, description, is_active, sort_order, created_at, updated_at, parent_id) VALUES 
(40, 'openai', 'OpenAI', 'llm', '', 'OpenAI公司', true, 1, NOW(), NOW(), NULL),
(41, 'google', 'Google', 'llm', '', 'Google公司', true, 2, NOW(), NOW(), NULL),
(42, 'gpt-4', 'GPT-4', 'llm', '', 'GPT-4模型', true, 1, NOW(), NOW(), 40),
(43, 'gpt-3.5-turbo', 'GPT-3.5 Turbo', 'llm', '', 'GPT-3.5 Turbo模型', true, 2, NOW(), NOW(), 40),
(44, 'gemini-pro', 'Gemini Pro', 'llm', '', 'Gemini Pro模型', true, 1, NOW(), NOW(), 41),
(53, 'anthropic', 'Anthropic', 'llm', '', 'Anthropic公司提供的Claude系列模型', true, 1, NOW(), NOW(), NULL),
(54, 'claude-3-opus', 'Claude 3 Opus', 'llm', '', 'Claude 3系列的最强版本', true, 1, NOW(), NOW(), 53),
(55, 'claude-3-sonnet', 'Claude 3 Sonnet', 'llm', '', 'Claude 3系列的平衡版本', true, 1, NOW(), NOW(), 53),
(56, 'claude-3-haiku', 'Claude 3 Haiku', 'llm', '', 'Claude 3系列的快速版本', true, 1, NOW(), NOW(), 53),
(57, 'zhipu', '智谱AI', 'llm', '', '智谱AI提供的GLM系列模型', true, 1, NOW(), NOW(), NULL),
(58, 'glm-4', 'GLM-4', 'llm', '', '智谱AI的第四代GLM模型', true, 1, NOW(), NOW(), 57),
(59, 'glm-3-turbo', 'GLM-3 Turbo', 'llm', '', 'GLM-3的快速版本', true, 1, NOW(), NOW(), 57),
(60, 'moonshot', 'Moonshot AI', 'llm', '', 'Moonshot AI提供的Kimi系列模型', true, 1, NOW(), NOW(), NULL),
(61, 'moonshot-v1-8k', 'Moonshot v1 8K', 'llm', '', 'Moonshot v1 8K上下文版本', true, 1, NOW(), NOW(), 60),
(62, 'moonshot-v1-32k', 'Moonshot v1 32K', 'llm', '', 'Moonshot v1 32K上下文版本', true, 1, NOW(), NOW(), 60),
(63, 'moonshot-v1-128k', 'Moonshot v1 128K', 'llm', '', 'Moonshot v1 128K上下文版本', true, 1, NOW(), NOW(), 60),
(64, 'baidu', '百度', 'llm', '', '百度公司提供的文心一言系列模型', true, 1, NOW(), NOW(), NULL),
(65, 'ernie-bot', '文心一言', 'llm', '', '百度文心一言大语言模型', true, 1, NOW(), NOW(), 64),
(66, 'ernie-bot-turbo', '文心一言 Turbo', 'llm', '', '文心一言的快速版本', true, 1, NOW(), NOW(), 64),
(67, 'ernie-bot-4', '文心一言 4.0', 'llm', '', '文心一言的最新版本', true, 1, NOW(), NOW(), 64),
(68, 'sse', 'SSE (Server-Sent Events)', 'mcp_server_type', '', 'Server-Sent Events协议的MCP服务器', true, 1, NOW(), NOW(), 71),
(69, 'http', 'HTTP (标准HTTP)', 'mcp_server_type', '', '标准HTTP协议的MCP服务器', true, 2, NOW(), NOW(), 71),
(70, 'stdio', 'STDIO (标准输入输出)', 'mcp_server_type', '', '标准输入输出协议的MCP服务器', true, 3, NOW(), NOW(), 71),
(71, '服务器类型', '服务器类型', 'mcp_server_type', '', '服务器类型', true, 3, NOW(), NOW(), NULL);

-- 重置序列
SELECT setval('public.sys_dictionary_item_id_seq', (SELECT MAX(id) FROM public.sys_dictionary));

-- =============================================
-- Django 迁移记录
-- =============================================

DELETE FROM public.django_migrations;
INSERT INTO public.django_migrations (app, name, applied) VALUES 
('contenttypes', '0001_initial', '2025-08-05 21:01:50.901556+08'),
('auth', '0001_initial', '2025-08-05 21:01:50.935806+08'),
('admin', '0001_initial', '2025-08-05 21:01:50.948039+08'),
('admin', '0002_logentry_remove_auto_add', '2025-08-05 21:01:50.952968+08'),
('admin', '0003_logentry_add_action_flag_choices', '2025-08-05 21:01:50.957992+08'),
('contenttypes', '0002_remove_content_type_name', '2025-08-05 21:01:50.968516+08'),
('auth', '0002_alter_permission_name_max_length', '2025-08-05 21:01:50.971927+08'),
('auth', '0003_alter_user_email_max_length', '2025-08-05 21:01:50.975653+08'),
('auth', '0004_alter_user_username_opts', '2025-08-05 21:01:50.979368+08'),
('auth', '0005_alter_user_last_login_null', '2025-08-05 21:01:50.982952+08'),
('auth', '0006_require_contenttypes_0002', '2025-08-05 21:01:50.984448+08'),
('auth', '0007_alter_validators_add_error_messages', '2025-08-05 21:01:50.988071+08'),
('auth', '0008_alter_user_username_max_length', '2025-08-05 21:01:50.993508+08'),
('auth', '0009_alter_user_last_name_max_length', '2025-08-05 21:01:50.997272+08'),
('auth', '0010_alter_group_name_max_length', '2025-08-05 21:01:51.002616+08'),
('auth', '0011_update_proxy_permissions', '2025-08-05 21:01:51.006471+08'),
('auth', '0012_alter_user_first_name_max_length', '2025-08-05 21:01:51.010202+08'),
('sessions', '0001_initial', '2025-08-05 21:01:51.017048+08'),
('crewaiplatform', '0001_initial', '2025-08-05 21:01:52.978903+08');

EOF

    # 恢复触发器
    $PSQL_CONN -d $DB_NAME -c "SET session_replication_role = DEFAULT;" 2>/dev/null || true

    if [ $? -eq 0 ]; then
        log_success "现有数据初始化成功"
    else
        log_error "现有数据初始化失败"
        exit 1
    fi
}

# 验证数据库
verify_database() {
    log_info "验证数据库结构和数据..."
    
    # 检查表数量
    TABLE_COUNT=$($PSQL_CONN -d $DB_NAME -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';" 2>/dev/null || echo "0")
    
    if [ "$TABLE_COUNT" -ge "20" ]; then
        log_success "数据库表结构验证通过 ($TABLE_COUNT 张表)"
    else
        log_warning "数据库表数量异常: $TABLE_COUNT 张表"
    fi
    
    # 检查基础数据
    USER_COUNT=$($PSQL_CONN -d $DB_NAME -tAc "SELECT COUNT(*) FROM auth_user;" 2>/dev/null || echo "0")
    ROLE_COUNT=$($PSQL_CONN -d $DB_NAME -tAc "SELECT COUNT(*) FROM sys_role;" 2>/dev/null || echo "0")
    PERMISSION_COUNT=$($PSQL_CONN -d $DB_NAME -tAc "SELECT COUNT(*) FROM sys_permission;" 2>/dev/null || echo "0")
    LLM_COUNT=$($PSQL_CONN -d $DB_NAME -tAc "SELECT COUNT(*) FROM llm_model;" 2>/dev/null || echo "0")
    
    log_info "数据统计："
    log_info "  - 用户数量: $USER_COUNT"
    log_info "  - 角色数量: $ROLE_COUNT" 
    log_info "  - 权限数量: $PERMISSION_COUNT"
    log_info "  - LLM模型数量: $LLM_COUNT"
    
    if [ "$USER_COUNT" -ge "1" ] && [ "$ROLE_COUNT" -ge "3" ] && [ "$PERMISSION_COUNT" -ge "10" ]; then
        log_success "基础数据验证通过"
        return 0
    else
        log_error "基础数据验证失败"
        return 1
    fi
}

# 主函数
main() {
    echo "========================================="
    echo "CrewAI Platform - 数据库初始化脚本"
    echo "========================================="
    
    log_info "开始初始化数据库 ($DB_TYPE)..."
    
    # 执行初始化步骤
    check_connection
    create_database
    create_schema
    create_constraints_and_indexes
    create_foreign_keys
    create_indexes
    init_data
    
    # 验证结果
    if verify_database; then
        echo ""
        echo "========================================="
        log_success "数据库初始化完成！"
        echo "========================================="
        log_info "数据库连接信息："
        log_info "  - 主机: $DB_HOST:$DB_PORT"
        log_info "  - 数据库: $DB_NAME"
        log_info "  - 用户: $DB_USER"
        echo ""
        log_info "默认管理员账户："
        log_info "  - 用户名: admin"
        log_info "  - 密码: admin123"
        echo ""
        log_info "现在可以启动Django应用:"
        log_info "  cd backend && python manage.py runserver"
        echo "========================================="
    else
        echo ""
        echo "========================================="
        log_error "数据库初始化失败！"
        echo "========================================="
        exit 1
    fi
}

# 执行主函数
main "$@"