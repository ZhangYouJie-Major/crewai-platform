# Generated by Django 4.2.23 on 2025-08-02 06:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("crewaiplatform", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="MCPTool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="MCP工具的唯一标识名称",
                        max_length=64,
                        unique=True,
                        verbose_name="工具名称",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="用于界面展示的友好名称",
                        max_length=128,
                        verbose_name="显示名称",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="工具的功能描述和使用说明",
                        verbose_name="工具描述",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        help_text="工具的版本号",
                        max_length=32,
                        verbose_name="工具版本",
                    ),
                ),
                (
                    "server_type",
                    models.CharField(
                        choices=[
                            ("stdio", "Standard I/O"),
                            ("sse", "Server-Sent Events"),
                            ("http", "HTTP"),
                        ],
                        help_text="MCP服务器的传输协议类型",
                        max_length=32,
                        verbose_name="服务器类型",
                    ),
                ),
                (
                    "connection_config",
                    models.JSONField(
                        default=dict,
                        help_text="MCP服务器的连接参数配置",
                        verbose_name="连接配置",
                    ),
                ),
                (
                    "tool_schema",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="工具的输入输出Schema定义（JSON Schema格式）",
                        verbose_name="工具Schema",
                    ),
                ),
                (
                    "connection_timeout",
                    models.IntegerField(
                        default=30,
                        help_text="建立连接的超时时间（秒）",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name="连接超时",
                    ),
                ),
                (
                    "request_timeout",
                    models.IntegerField(
                        default=60,
                        help_text="单个请求的超时时间（秒）",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(600),
                        ],
                        verbose_name="请求超时",
                    ),
                ),
                (
                    "max_retries",
                    models.IntegerField(
                        default=3,
                        help_text="连接失败时的重试次数",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="最大重试次数",
                    ),
                ),
                (
                    "retry_delay",
                    models.FloatField(
                        default=1.0,
                        help_text="重试之间的延迟时间（秒）",
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(60.0),
                        ],
                        verbose_name="重试延迟",
                    ),
                ),
                (
                    "health_check_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="是否定期进行健康检查",
                        verbose_name="启用健康检查",
                    ),
                ),
                (
                    "health_check_interval",
                    models.IntegerField(
                        default=300,
                        help_text="健康检查的间隔时间（秒）",
                        validators=[
                            django.core.validators.MinValueValidator(60),
                            django.core.validators.MaxValueValidator(3600),
                        ],
                        verbose_name="健康检查间隔",
                    ),
                ),
                (
                    "health_check_method",
                    models.CharField(
                        default="ping",
                        help_text="健康检查使用的方法名称",
                        max_length=64,
                        verbose_name="健康检查方法",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("unknown", "未知"),
                            ("healthy", "健康"),
                            ("unhealthy", "不健康"),
                            ("error", "错误"),
                        ],
                        default="unknown",
                        help_text="工具的当前健康状态",
                        max_length=32,
                        verbose_name="状态",
                    ),
                ),
                (
                    "last_health_check",
                    models.DateTimeField(
                        blank=True,
                        help_text="最后一次健康检查的时间",
                        null=True,
                        verbose_name="最后健康检查时间",
                    ),
                ),
                (
                    "last_error",
                    models.TextField(
                        blank=True,
                        help_text="最后一次连接或调用错误的详细信息",
                        verbose_name="最后错误",
                    ),
                ),
                (
                    "response_time_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="最近一次请求的响应时间（毫秒）",
                        null=True,
                        verbose_name="响应时间",
                    ),
                ),
                (
                    "total_calls",
                    models.IntegerField(
                        default=0,
                        help_text="工具被调用的总次数",
                        verbose_name="总调用次数",
                    ),
                ),
                (
                    "success_calls",
                    models.IntegerField(
                        default=0,
                        help_text="成功调用的次数",
                        verbose_name="成功调用次数",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="是否在系统中启用此工具",
                        verbose_name="是否启用",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="是否允许所有用户使用此工具",
                        verbose_name="是否公开",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "allowed_users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="允许使用此工具的用户列表",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="允许使用的用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "MCP工具配置",
                "verbose_name_plural": "MCP工具配置",
                "db_table": "mcp_tool",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LLMModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="显示名称，用于界面展示",
                        max_length=64,
                        unique=True,
                        verbose_name="模型名称",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("openai", "OpenAI"),
                            ("anthropic", "Anthropic (Claude)"),
                            ("azure_openai", "Azure OpenAI"),
                            ("ollama", "Ollama (本地)"),
                            ("huggingface", "HuggingFace"),
                            ("google", "Google (PaLM/Gemini)"),
                            ("cohere", "Cohere"),
                            ("custom", "自定义"),
                        ],
                        help_text="LangChain支持的模型提供商",
                        max_length=32,
                        verbose_name="提供商",
                    ),
                ),
                (
                    "model_name",
                    models.CharField(
                        help_text="LangChain中的模型名称，如 gpt-4, claude-3-sonnet",
                        max_length=128,
                        verbose_name="模型标识",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="模型的详细描述信息",
                        verbose_name="模型描述",
                    ),
                ),
                (
                    "langchain_class",
                    models.CharField(
                        default="ChatOpenAI",
                        help_text="对应的LangChain模型类，如 ChatOpenAI, ChatAnthropic",
                        max_length=128,
                        verbose_name="LangChain类名",
                    ),
                ),
                (
                    "api_base_url",
                    models.URLField(
                        blank=True,
                        help_text="自定义API端点，为空则使用默认",
                        verbose_name="API基础URL",
                    ),
                ),
                (
                    "api_key",
                    models.TextField(
                        help_text="加密存储的API密钥", verbose_name="API密钥"
                    ),
                ),
                (
                    "api_version",
                    models.CharField(
                        blank=True,
                        help_text="API版本号，主要用于Azure OpenAI",
                        max_length=16,
                        verbose_name="API版本",
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        default=0.7,
                        help_text="控制生成文本的随机性，0-2之间",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                        verbose_name="温度参数",
                    ),
                ),
                (
                    "max_tokens",
                    models.IntegerField(
                        blank=True,
                        help_text="单次生成的最大token数量",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="最大Token数",
                    ),
                ),
                (
                    "timeout",
                    models.IntegerField(
                        default=30,
                        help_text="API请求超时时间（秒）",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name="超时时间",
                    ),
                ),
                (
                    "max_retries",
                    models.IntegerField(
                        default=2,
                        help_text="API请求失败时的重试次数",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="最大重试次数",
                    ),
                ),
                (
                    "extra_kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="LangChain模型的其他参数配置",
                        verbose_name="额外参数",
                    ),
                ),
                (
                    "model_kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="传递给模型的额外参数",
                        verbose_name="模型参数",
                    ),
                ),
                (
                    "model_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="从API动态获取的模型详细信息",
                        verbose_name="模型信息",
                    ),
                ),
                (
                    "last_validated",
                    models.DateTimeField(
                        blank=True,
                        help_text="最后一次成功连接验证的时间",
                        null=True,
                        verbose_name="最后验证时间",
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=False,
                        help_text="模型连接状态，通过API验证确定",
                        verbose_name="是否可用",
                    ),
                ),
                (
                    "validation_error",
                    models.TextField(
                        blank=True,
                        help_text="最后一次验证失败的错误信息",
                        verbose_name="验证错误",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="是否在系统中启用此模型",
                        verbose_name="是否启用",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "LLM模型配置",
                "verbose_name_plural": "LLM模型配置",
                "db_table": "llm_model",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["provider"], name="llm_model_provide_41218d_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="llm_model_is_acti_691f0d_idx"
                    ),
                    models.Index(
                        fields=["is_available"], name="llm_model_is_avai_9e6d97_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CrewAIAgent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Agent的唯一标识名称",
                        max_length=64,
                        unique=True,
                        verbose_name="Agent名称",
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="用于界面展示的友好名称",
                        max_length=128,
                        verbose_name="显示名称",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Agent的功能描述和使用说明",
                        verbose_name="Agent描述",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        help_text="Agent的角色定义，如'数据分析师'、'文档编写员'等",
                        max_length=128,
                        verbose_name="角色",
                    ),
                ),
                (
                    "goal",
                    models.TextField(
                        help_text="Agent的主要目标和职责描述", verbose_name="目标"
                    ),
                ),
                (
                    "backstory",
                    models.TextField(
                        help_text="Agent的背景故事，增强其人格化特征",
                        verbose_name="背景故事",
                    ),
                ),
                (
                    "verbose",
                    models.BooleanField(
                        default=False,
                        help_text="是否启用详细的执行日志输出",
                        verbose_name="详细日志",
                    ),
                ),
                (
                    "memory",
                    models.BooleanField(
                        default=False,
                        help_text="是否启用Agent的长期记忆功能",
                        verbose_name="启用记忆",
                    ),
                ),
                (
                    "max_iter",
                    models.IntegerField(
                        default=20,
                        help_text="Agent执行任务时的最大迭代次数",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="最大迭代次数",
                    ),
                ),
                (
                    "max_rpm",
                    models.IntegerField(
                        blank=True,
                        help_text="限制Agent每分钟的API请求次数",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="每分钟最大请求数",
                    ),
                ),
                (
                    "max_execution_time",
                    models.IntegerField(
                        blank=True,
                        help_text="单个任务的最大执行时间（秒）",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="最大执行时间",
                    ),
                ),
                (
                    "max_retry_limit",
                    models.IntegerField(
                        default=2,
                        help_text="任务失败时的最大重试次数",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="最大重试次数",
                    ),
                ),
                (
                    "allow_delegation",
                    models.BooleanField(
                        default=False,
                        help_text="是否允许Agent将任务委托给其他Agent",
                        verbose_name="允许委托",
                    ),
                ),
                (
                    "respect_context_window",
                    models.BooleanField(
                        default=True,
                        help_text="是否遵循LLM模型的上下文窗口限制",
                        verbose_name="遵循上下文窗口",
                    ),
                ),
                (
                    "use_system_prompt",
                    models.BooleanField(
                        default=True,
                        help_text="是否使用CrewAI的默认系统提示",
                        verbose_name="使用系统提示",
                    ),
                ),
                (
                    "multimodal",
                    models.BooleanField(
                        default=False,
                        help_text="是否启用多模态输入处理（图像、音频等）",
                        verbose_name="多模态支持",
                    ),
                ),
                (
                    "inject_date",
                    models.BooleanField(
                        default=False,
                        help_text="是否在提示中自动注入当前日期时间",
                        verbose_name="注入日期",
                    ),
                ),
                (
                    "date_format",
                    models.CharField(
                        default="%Y-%m-%d %H:%M:%S",
                        help_text="注入日期时使用的格式字符串",
                        max_length=32,
                        verbose_name="日期格式",
                    ),
                ),
                (
                    "reasoning",
                    models.BooleanField(
                        default=False,
                        help_text="是否启用Agent的推理思考功能",
                        verbose_name="启用推理",
                    ),
                ),
                (
                    "max_reasoning_attempts",
                    models.IntegerField(
                        default=3,
                        help_text="推理功能的最大尝试次数",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="最大推理尝试次数",
                    ),
                ),
                (
                    "step_callback",
                    models.CharField(
                        blank=True,
                        help_text="每个执行步骤的回调函数名称",
                        max_length=255,
                        verbose_name="步骤回调",
                    ),
                ),
                (
                    "enable_monitoring",
                    models.BooleanField(
                        default=True,
                        help_text="是否启用Agent执行过程的监控",
                        verbose_name="启用监控",
                    ),
                ),
                (
                    "custom_instructions",
                    models.TextField(
                        blank=True,
                        help_text="附加的自定义指令和提示",
                        verbose_name="自定义指令",
                    ),
                ),
                (
                    "agent_kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="传递给CrewAI Agent的其他参数",
                        verbose_name="Agent参数",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("inactive", "未激活"),
                            ("active", "激活"),
                            ("running", "运行中"),
                            ("paused", "暂停"),
                            ("error", "错误"),
                        ],
                        default="inactive",
                        help_text="Agent的当前运行状态",
                        max_length=32,
                        verbose_name="状态",
                    ),
                ),
                (
                    "total_tasks",
                    models.IntegerField(
                        default=0,
                        help_text="Agent处理的总任务数量",
                        verbose_name="总任务数",
                    ),
                ),
                (
                    "completed_tasks",
                    models.IntegerField(
                        default=0,
                        help_text="Agent成功完成的任务数量",
                        verbose_name="完成任务数",
                    ),
                ),
                (
                    "total_execution_time",
                    models.IntegerField(
                        default=0,
                        help_text="Agent的累计执行时间（秒）",
                        verbose_name="总执行时间",
                    ),
                ),
                (
                    "last_execution",
                    models.DateTimeField(
                        blank=True,
                        help_text="Agent最后一次执行任务的时间",
                        null=True,
                        verbose_name="最后执行时间",
                    ),
                ),
                (
                    "last_error",
                    models.TextField(
                        blank=True,
                        help_text="最后一次执行错误的详细信息",
                        verbose_name="最后错误",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="是否在系统中启用此Agent",
                        verbose_name="是否启用",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="是否允许所有用户使用此Agent",
                        verbose_name="是否公开",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "allowed_users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="允许使用此Agent的用户列表",
                        related_name="shared_agents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="允许使用的用户",
                    ),
                ),
                (
                    "function_calling_llm",
                    models.ForeignKey(
                        blank=True,
                        help_text="专门用于工具调用的语言模型，可与主模型不同",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="function_calling_agents",
                        to="crewaiplatform.llmmodel",
                        verbose_name="工具调用LLM",
                    ),
                ),
                (
                    "llm_model",
                    models.ForeignKey(
                        help_text="Agent使用的主要语言模型",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="primary_agents",
                        to="crewaiplatform.llmmodel",
                        verbose_name="主要LLM模型",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Agent的创建者和所有者",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_agents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="所有者",
                    ),
                ),
            ],
            options={
                "verbose_name": "CrewAI Agent配置",
                "verbose_name_plural": "CrewAI Agent配置",
                "db_table": "crewai_agent",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AgentToolRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0,
                        help_text="工具在Agent中的使用优先级，数字越小优先级越高",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="使用顺序",
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="该工具是否为Agent执行任务的必需工具",
                        verbose_name="是否必需",
                    ),
                ),
                (
                    "is_fallback",
                    models.BooleanField(
                        default=False,
                        help_text="当主要工具失败时是否作为备用工具使用",
                        verbose_name="是否为备用工具",
                    ),
                ),
                (
                    "max_calls_per_task",
                    models.IntegerField(
                        blank=True,
                        help_text="单个任务中对该工具的最大调用次数",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="每任务最大调用次数",
                    ),
                ),
                (
                    "config_override",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="对工具默认配置的覆盖参数",
                        verbose_name="配置覆盖",
                    ),
                ),
                (
                    "prompt_template",
                    models.TextField(
                        blank=True,
                        help_text="调用该工具时使用的自定义提示模板",
                        verbose_name="提示模板",
                    ),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("read", "只读"),
                            ("write", "读写"),
                            ("execute", "执行"),
                            ("admin", "管理员"),
                        ],
                        default="read",
                        help_text="Agent对该工具的权限级别",
                        max_length=32,
                        verbose_name="权限级别",
                    ),
                ),
                (
                    "allowed_operations",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Agent可以使用的工具操作列表",
                        verbose_name="允许的操作",
                    ),
                ),
                (
                    "restricted_paths",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="工具访问的限制路径列表（如果适用）",
                        verbose_name="限制路径",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "激活"),
                            ("inactive", "未激活"),
                            ("error", "错误"),
                            ("deprecated", "已弃用"),
                        ],
                        default="active",
                        help_text="关联关系的当前状态",
                        max_length=32,
                        verbose_name="状态",
                    ),
                ),
                (
                    "total_calls",
                    models.IntegerField(
                        default=0,
                        help_text="Agent对该工具的总调用次数",
                        verbose_name="总调用次数",
                    ),
                ),
                (
                    "successful_calls",
                    models.IntegerField(
                        default=0,
                        help_text="成功调用的次数",
                        verbose_name="成功调用次数",
                    ),
                ),
                (
                    "total_execution_time",
                    models.IntegerField(
                        default=0,
                        help_text="该工具的累计执行时间（毫秒）",
                        verbose_name="总执行时间",
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True,
                        help_text="Agent最后一次使用该工具的时间",
                        null=True,
                        verbose_name="最后使用时间",
                    ),
                ),
                (
                    "last_error",
                    models.TextField(
                        blank=True,
                        help_text="最后一次调用错误的详细信息",
                        verbose_name="最后错误",
                    ),
                ),
                (
                    "config_version",
                    models.CharField(
                        default="1.0",
                        help_text="配置的版本号，用于跟踪配置变更",
                        max_length=32,
                        verbose_name="配置版本",
                    ),
                ),
                (
                    "assigned_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Agent与工具绑定的时间",
                        verbose_name="绑定时间",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="绑定的CrewAI Agent",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agent_tool_relations",
                        to="crewaiplatform.crewaiagent",
                        verbose_name="关联Agent",
                    ),
                ),
                (
                    "tool",
                    models.ForeignKey(
                        help_text="绑定的MCP工具",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tool_agent_relations",
                        to="crewaiplatform.mcptool",
                        verbose_name="关联工具",
                    ),
                ),
            ],
            options={
                "verbose_name": "Agent-Tool关联",
                "verbose_name_plural": "Agent-Tool关联",
                "db_table": "agent_tool_relation",
                "ordering": ["agent", "order", "-assigned_at"],
            },
        ),
        migrations.AddIndex(
            model_name="mcptool",
            index=models.Index(
                fields=["server_type"], name="mcp_tool_server__d3fa8b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="mcptool",
            index=models.Index(fields=["status"], name="mcp_tool_status_31eaee_idx"),
        ),
        migrations.AddIndex(
            model_name="mcptool",
            index=models.Index(
                fields=["is_active"], name="mcp_tool_is_acti_c3b240_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="mcptool",
            index=models.Index(
                fields=["is_public"], name="mcp_tool_is_publ_47d300_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crewaiagent",
            index=models.Index(fields=["status"], name="crewai_agen_status_274771_idx"),
        ),
        migrations.AddIndex(
            model_name="crewaiagent",
            index=models.Index(
                fields=["is_active"], name="crewai_agen_is_acti_7235fb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crewaiagent",
            index=models.Index(
                fields=["is_public"], name="crewai_agen_is_publ_04b3bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crewaiagent",
            index=models.Index(fields=["owner"], name="crewai_agen_owner_i_ba2a11_idx"),
        ),
        migrations.AddIndex(
            model_name="crewaiagent",
            index=models.Index(
                fields=["llm_model"], name="crewai_agen_llm_mod_3d5a04_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agenttoolrelation",
            index=models.Index(
                fields=["agent", "order"], name="agent_tool__agent_i_98bd32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agenttoolrelation",
            index=models.Index(
                fields=["tool", "status"], name="agent_tool__tool_id_a1c265_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agenttoolrelation",
            index=models.Index(fields=["status"], name="agent_tool__status_f8a435_idx"),
        ),
        migrations.AddIndex(
            model_name="agenttoolrelation",
            index=models.Index(
                fields=["is_required"], name="agent_tool__is_requ_5a2954_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agenttoolrelation",
            index=models.Index(
                fields=["is_fallback"], name="agent_tool__is_fall_321826_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="agenttoolrelation",
            unique_together={("agent", "tool")},
        ),
    ]
